#!/usr/bin/env python
# run a thing, and tell vim to jump to the first error we find
from __future__ import print_function

import os, sys, subprocess, re

from optparse import OptionParser

def DEBUG(*a): pass
def enable_debug(*a):
	global DEBUG
	def DEBUG(*a):
		print('[vim-err]', *a, file=sys.stderr)
	DEBUG("debug mode enabled...")

if os.environ.get('VIM_ERR_DEBUG','0') == '1':
	enable_debug()

p = OptionParser("Usage: %prog [OPTIONS] BUILD_COMMAND ...")
p.add_option('-r', '--remote')
p.add_option('-n', '--nvim', action='store_true', default = 'NVIM_LISTEN_ADDRESS' in os.environ)
p.add_option('-v', '--verbose', action='store_true')
p.add_option('-p', '--prompt', action='store_true')
p.add_option('-s', '--source', dest='sources', action='append', default=[os.getcwd()], help='add source root')
p.add_option('--replace', action='append', default=[], help='add (literal) path replacement, e.g. /app=.')
p.add_option('--filter', action='append', default=[], help='only match files including FILTER')
p.add_option('-c', '--context',type='int')
p.disable_interspersed_args()
opts, args = p.parse_args()
if opts.verbose:
	enable_debug()

ansi_escape = re.compile(r'\x1b[^m]*m')
# TODO: add more formats
file_match = re.compile(r'''
	(
		([^: ]+):(\d+):(?:(\d+):)? # foo.bar:3:23
	)|(
		([^: ]+): line (\d+)(?:, col (\d+):)? # foo.bar: line 3, col 23
	)|(
		File\ "([^"]+)",\ line\ (\d+),\ characters\ (\d+)-\d+ # ocaml: File "foo.ml", line 3, characters 1-19
	)
	''', re.VERBOSE)

assert len(args) > 0, "no arguments given"
context = opts.context

def parse_replacement(s):
	pair = s.split('=',1)
	assert len(pair) == 2, "invalid replacement: %s" % (s,)
	return pair

def each_path(envvar):
	val = os.environ.get(envvar, None)
	if val is not None:
		for path in val.split(':'):
			if not path: continue
			yield path

for source in each_path('VIM_ERR_PATH'):
	opts.sources.append(source)

opts.replace = list(map(parse_replacement, opts.replace))
for replacement in each_path('VIM_ERR_REPLACE'):
	opts.replace.append(parse_replacement(replacement))

DEBUG("opts: %r" % opts)

proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
status = None
DONE = False
# SUPPRESS = False
REMOTE = None
DELAYED_ACTION = None

def open_remotely(opts, path, lineno, col):
	cmd = [ 'nvr' if opts.nvim else 'vim' ]
	remote_name = opts.remote
	if remote_name is None:
		remote_name = os.environ.get('VIM_SVRNAME')
	
	if remote_name is not None:
		cmd.extend(['--servername', remote_name])

	if col is None: col = 1
	coords = 'call cursor(%s,%s)' % (lineno, col)
	cmd.extend([
		'--remote-send',
		'<esc>:drop {path}<cr>:{coords}<cr>'.format(
			path=path.replace('\\','\\\\').replace(' ', '\\ '),
			coords=coords,
		),
	])
	DEBUG(repr(cmd))
	return subprocess.Popen(cmd)

def cleanup():
	global DELAYED_ACTION
	if DELAYED_ACTION:
		DELAYED_ACTION()
		DELAYED_ACTION = None
	

for line in proc.stdout.readlines():
	# if SUPPRESS: continue
	line = line.decode('utf-8')
	print(line, end='')
	if not DONE:
		line = ansi_escape.sub('', line)
		match = file_match.search(line)
		if match:
			DEBUG(repr(match.groups()))
			parts = list(filter(None, match.groups()))
			parts.pop(0) # match_op
			rel_path = parts.pop(0)
			if opts.filter and not any([f in rel_path for f in opts.filter]):
				DEBUG("rel_path %r does not match any filters in %r" % (rel_path, opts.filter))
			lineno = parts.pop(0)
			if parts:
				col, = parts
			else:
				col = None
			for find, replace in [(None, None)] + opts.replace:
				DEBUG("Processing replacement for %s -> %s on rel_path %s" % (find, replace, rel_path))
				current_rel_path = rel_path
				if find is not None:
					if find not in current_rel_path:
						# no hits, ignore this replacement
						continue
					current_rel_path = current_rel_path.replace(find, replace)

				for source in opts.sources:
					path = os.path.join(source, current_rel_path)
					if os.path.isfile(path):
						DONE = True
						if opts.prompt:
							def action():
								global REMOTE
								print('\n ** press return to jump to file vim **', file=sys.stderr,end='')
								response = input()
								DEBUG(repr(response))
								if response == '':
									REMOTE = open_remotely(opts, path, lineno, col)
							DELAYED_ACTION = action
						else:
							REMOTE = open_remotely(opts, path, lineno, col)
					else:
						DEBUG("No such file: %s" %(path))
	if DONE:
		if context is not None:
			if context > 0:
				context -= 1
			else:
				cleanup()
				proc.kill()
				status = 1
				break
else:
	cleanup()

proc_status = proc.wait()
if REMOTE and REMOTE.wait() != 0:
	print(sys.stderr, "WARN: vim --remote-send failed")
sys.exit(status or proc_status)
