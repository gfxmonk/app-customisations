#!/usr/bin/env bash
if [ "$#" -eq 0 ]; then
	set -- "TODO"
fi

rg --json "$@" | piep \
	-m time -m pygments -m pygments.formatters -m json \
	-e 'text = lambda d: d.get("text", None)' \
	-e 'devnull = open(os.devnull, "w")' \
	-e 'from pygments.token import *' \
	'json.loads | p["type"] == "match" | p["data"] | path = text(p["path"]) | line = p["line_number"]
	| contents = text(p["lines"]) | path is not None | (line, path, contents)
	| blame = (sh("git", "blame", "-L%d,%d" % (line,line), "--line-porcelain", path, stderr=devnull) or "").splitlines()
	| blame = next(iter(filter(lambda x: x.startswith("committer-time "), blame)))
	| ts = int(blame.split()[1]) | (ts, time.strftime("%Y-%m-%d", time.localtime(ts)), path, line, contents.strip())
	| list(pp)
	| pp.sortby(lambda x: x[0])
	| maxfile = max([len(x[2]) for x in pp])+1
	| maxlineno = max([len(str(x[3])) for x in pp])
	| pygments.format([
		(Keyword, p[1]),
		(Text, " "),
		(String, ("%%%ds" % maxfile) % (p[2] + ":")),
		(Literal.Number, ("%%-%dd" % maxlineno) % (p[3])),
		(Whitespace, " "),
		(Text, p[4])
	], pygments.formatters.get_formatter_by_name("console"))'
