#!/usr/bin/env python3
from __future__ import print_function
import os
import optparse
import re
import logging
import subprocess

logging.basicConfig(level=logging.INFO)

XDG_RUNTIME_DIR = 'XDG_RUNTIME_DIR'
DISPLAY = 'DISPLAY'


# def get_display(xdg_runtime, exports):
# 	display = os.environ.get(DISPLAY, None)
# 	if display is not None: return display.lstrip(':')
#
# 	display = opts.display
# 	rv = opts.display
# 	if rv is None:
# 		try:
# 			display_file = os.path.join(xdg_runtime, 'X11-display')
# 			if os.path.exists(display_file):
# 				dest = os.readlink(display_file)
# 				match = re.search('\d+$', dest)
# 				if match is not None:
# 					rv = match.group(0)
# 			else:
# 				logging.debug("no such file: %s" % (display_file,))
# 		except Exception as e:
# 			logging.error("error:", exc_info=True)
# 		if rv is None:
# 			rv = '0'
#
# 	# only export $DISPLAY if it wasn't already set
# 	exports[DISPLAY] = ':'+rv
# 	return rv

# def file_method(display):
# 	# doesn't work - file is not actually updated with newest dbus vars
# 	machine_id = subprocess.check_output(['dbus-uuidgen', '--get']).strip()
# 	display = get_display()
# 	vars_file = os.path.expanduser('~/.dbus/session-bus/%s-%s' % (machine_id, display))
#
# 	with open(vars_file) as f:
# 		from shlex import shlex
# 		script = shlex(f, vars_file, posix=True)
# 		script.whitespace_split = True
# 		while True:
# 			token = script.get_token()
# 			if token is None: break
# 			if not '=' in token:
# 				logging.warn("unknown token: %s" % (token,))
# 				continue
# 			if '\n' in token:
# 				logging.warn("token contains newline: %s" % (token,))
# 				continue
# 			EXPORTS.append(token)

def pgrep_vars(opts):
	import getpass
	pid_output = subprocess.check_output(['pgrep', '-u', getpass.getuser(), opts.process])
	pids = list(map(int, pid_output.strip().decode('ascii').split('\n')))
	assert pids, "no %s process found" % (opts.process,)
	if len(pids) > 1:
		# TODO: get correct one based on its $DISPLAY var
		logging.warning("multiple pids found")
	pid = pids[0]
	rv = {}
	# logging.warn('loading %s', '/proc/%d/environ' % pid)
	with open('/proc/%d/environ' % pid) as env_file:
		vars = env_file.read().split('\0')
		for var in vars:
			if not var: continue
			k,v = var.split('=', 1)
			rv[k]=v
	return rv

bash_safe = re.compile('^[-_a-zA-Z0-9/:.]+$')
def bash_escape(s):
	if re.match(bash_safe, s): return s
	return "'" + s.replace("'", "'\\''") + "'"

def main():
	p = optparse.OptionParser()
	p.add_option('--display')
	p.add_option('--pure', action='store_true', default = False, help='don\'t inherit any vars')
	p.add_option('--var', action='append', default=[], help='select specific variable (may be passed multiple times)')
	p.add_option('--exclude', action='append', default=[], help='exclude specific variable (may be passed multiple times)')
	p.add_option('--all', action='store_true', help='copy all env vars, not just session-related ones')
	p.add_option('--export', action='store_true', help='prefix each line with `export` (for bash eval)')
	p.add_option('--process', default = 'gnome-session', help='process to steal vars from')
	opts, args = p.parse_args()
	assert len(args) == 0, "too many args"

	if opts.var == []:
		opts.var = None
	DEFAULT_VAR_PREFIX = ['XDG_', 'DBUS_', 'SSH_', 'LC_']
	DEFAULT_VARS = ['DISPLAY', 'XAUTHORITY']

	exports = {}
	exports.update(pgrep_vars(opts))

	fmt = "export %s=%s" if opts.export else "%s=%s"
	already_set = frozenset() if opts.pure else frozenset(os.environ.keys())
	for var, val in exports.items():
		if not opts.all:
			if var in opts.exclude: continue
			if opts.var and var not in opts.var: continue
			if var in already_set: continue

			if not (var in DEFAULT_VARS or any((var.startswith(pfx) for pfx in DEFAULT_VAR_PREFIX))):
				continue

		if opts.export:
			if '\n' in var:
				logging.warn("token contains newline: %s" % (var,))
				continue
			var = bash_escape(var)
			val = bash_escape(val)
		print(fmt % (var,val))

if __name__ == '__main__':
	main()
